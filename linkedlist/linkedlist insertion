#include<stdio.h>
#include<stdlib.h>

struct Node{
       int data;
       struct Node*next;
};
void LinkedListTraversal(struct Node*ptr)
{
    while(ptr!=NULL)
    {
        printf("element: %d\n",ptr->data);
        ptr = ptr->next;
    
    }
}
//case 1
struct Node*insertAtFirst(struct Node *head,int data,int index)
{
    struct Node*ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data=data;
    ptr->next=head;
    head=ptr;
    return ptr;

}
//case2
struct Node*insertAtindex(struct Node *head,int data,int index)
{
    struct Node*ptr = (struct Node*)malloc(sizeof(struct Node));
    struct Node*p = head;
    int i= 0;
    while(i!=index-1)
    {
        p=p->next;
        i++;
    }
    ptr->data=data;
    ptr->next=p->next;
    p->next=ptr;
    return head;
    
}
//case 3
struct Node*insertAtend(struct Node *head,int data)
{
    struct Node*ptr = (struct Node*)malloc(sizeof(struct Node));
    struct Node*p=head;
    while(p->next!=NULL){
        p=p->next;
    }
   ptr->data=data;
   p->next=ptr;
   ptr->next=NULL;
   return head;
}
struct Node*insertAfterNode(struct Node *prevNode,struct Node*head,int data)
{
    struct Node*ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data=data;
    ptr->next=prevNode->next;
    prevNode->next=ptr;
    


}
 int main()
 {
    struct Node*head;
    struct Node*second;
    struct Node*third;

    head=(struct Node*)malloc(sizeof(struct Node));
    second=(struct Node*)malloc(sizeof(struct Node));
    third=(struct Node*)malloc(sizeof(struct Node));

head->data=7;
head->next=second;

second->data=11;
second->next=third;

third->data=66;
third->next=NULL;
printf("Linked List before insertion\n");
LinkedListTraversal(head);
//head= insertAtfirst(head,56);
//head= insertAtindex(head,56,1);
//head= insertAtend(head,56);
head= insertAfterNode(head,second,56);
printf("Linked List after insertion\n");

LinkedListTraversal(head);

return 0;
 }
